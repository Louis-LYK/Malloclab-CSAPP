#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "explicit_mm.h"
#include "memlib.h"

team_t team = {
    /* Team name */
    "lyk-explicit",
    /* First member's full name */
    "liuyikai",
    /* First member's email address */
    "lykfrancis@163.com",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};

/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8
#define WSIZE 4
#define DSIZE 8
#define CHUNKSIZE (1<<12)
#define SIZE_TMAX 65535

#define MAX(x, y) ((x) > (y)? (x) : (y))  
#define PACK(size, alloc)  ((size) | (alloc)) //line:vm:mm:pack

#define GET(p)       (*(unsigned int *)(p))            //line:vm:mm:get
#define PUT(p, val)  (*(unsigned int *)(p) = (val))    //line:vm:mm:put

/* Read the size and allocated fields from address p */
#define GET_SIZE(p)  (GET(p) & ~0x7)                   //line:vm:mm:getsize
#define GET_ALLOC(p) (GET(p) & 0x1)                    //line:vm:mm:getalloc

/* Given block ptr bp, compute address of its header and footer */
#define HDRP(bp)       ((char *)(bp) - WSIZE)                      //line:vm:mm:hdrp
#define FTRP(bp)       ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE) //line:vm:mm:ftrp

/* Given block ptr bp, compute address of next and previous blocks */
#define NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE))) 
#define PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE))) 

#define SUCC_INDEX(bp) ((char *)(bp) + WSIZE)
#define PRED_INDEX(bp) ((char *)(bp))

static char* heap_listp;
static void* extend_heap(size_t words);
static void* coalesce(void* bp);
static void place(void* bp, size_t asize);
static void* find_fit(size_t asize);
static void* best_fit(size_t asize);
static void* addlist(void* bp);

int mm_init(void) {
    if((heap_listp = mem_sbrk(6 * WSIZE)) == (void*)-1) { return -1; }
    PUT(heap_listp, 0);
    PUT(heap_listp + (1 * WSIZE), PACK(2 * DSIZE, 1));
    PUT(heap_listp + (2 * WSIZE), NULL);
    PUT(heap_listp + (3 * WSIZE), NULL);
    PUT(heap_listp + (4 * WSIZE), PACK(2 * DSIZE, 1));
    PUT(heap_listp + (5 * WSIZE), PACK(0, 1));
    heap_listp += 2 * WSIZE;

    if(extend_heap(CHUNK/WSIZE) == NULL) { return -1; }
    return 0;
}

static void* extend_heap(size_t words) {
    char* bp;
    size_t size;
    if(words == 0) { return NULL; }
    size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;
    if(size ) { return NULL; }
    if(words <= 4 * WSIZE) { size = 4 * WSIZE; }

}


